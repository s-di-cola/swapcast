{"abi":[{"type":"function","name":"checker","inputs":[],"outputs":[{"name":"canExec","type":"bool","internalType":"bool"},{"name":"execPayload","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"getExpiredMarkets","inputs":[],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"isMarketExpired","inputs":[{"name":"marketId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"performGelatoUpkeep","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"protocolFeeBasisPoints","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"recordPrediction","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"marketId","type":"uint256","internalType":"uint256"},{"name":"outcome","type":"uint8","internalType":"enum PredictionTypes.Outcome"},{"name":"convictionStakeDeclared","type":"uint128","internalType":"uint128"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"resolveMarketManual","inputs":[{"name":"marketId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"checker()":"cf5303cf","getExpiredMarkets()":"ead4f541","isMarketExpired(uint256)":"a7a1bcb2","performGelatoUpkeep()":"6c3a4ba1","protocolFeeBasisPoints()":"b2b85d93","recordPrediction(address,uint256,uint8,uint128)":"e0a67c54","resolveMarketManual(uint256)":"75c5a9c7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpiredMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"isMarketExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performGelatoUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"enum PredictionTypes.Outcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"convictionStakeDeclared\",\"type\":\"uint128\"}],\"name\":\"recordPrediction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"resolveMarketManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SwapCast Developers\",\"kind\":\"dev\",\"methods\":{\"checker()\":{\"returns\":{\"canExec\":\"Whether upkeep is needed\",\"execPayload\":\"The payload to execute\"}},\"getExpiredMarkets()\":{\"returns\":{\"_0\":\"An array of market IDs that have expired\"}},\"isMarketExpired(uint256)\":{\"params\":{\"marketId\":\"The ID of the market to check\"},\"returns\":{\"_0\":\"Whether the market has expired\"}},\"protocolFeeBasisPoints()\":{\"returns\":{\"_0\":\"The protocol fee in basis points (e.g., 100 for 1%).\"}},\"recordPrediction(address,uint256,uint8,uint128)\":{\"details\":\"This function is called by the hook, which passes the stake amount declared in hookData.\",\"params\":{\"convictionStakeDeclared\":\"The amount of conviction (stake) declared for this prediction.\",\"marketId\":\"The ID of the market for which the prediction is made.\",\"outcome\":\"The predicted outcome (Bearish or Bullish).\",\"user\":\"The address of the user making the prediction.\"}},\"resolveMarketManual(uint256)\":{\"params\":{\"marketId\":\"The ID of the market to resolve\"}}},\"title\":\"IPredictionManager Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checker()\":{\"notice\":\"Gelato automation checker function\"},\"getExpiredMarkets()\":{\"notice\":\"Returns an array of expired market IDs\"},\"isMarketExpired(uint256)\":{\"notice\":\"Checks if a market has expired\"},\"performGelatoUpkeep()\":{\"notice\":\"Performs Gelato upkeep to resolve expired markets\"},\"protocolFeeBasisPoints()\":{\"notice\":\"Returns the current protocol fee in basis points.\"},\"recordPrediction(address,uint256,uint8,uint128)\":{\"notice\":\"Records a user's prediction and associated stake.\"},\"resolveMarketManual(uint256)\":{\"notice\":\"Manually resolves a market (owner only)\"}},\"notice\":\"Defines the interface for the PredictionManager contract, primarily for interaction from the SwapCastHook.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IPredictionManager.sol\":\"IPredictionManager\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/\",\":@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@pythnetwork/pyth-sdk-solidity/=node_modules/@pythnetwork/pyth-sdk-solidity/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":chainlink-brownie-contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":ds-test/=lib/foundry-chainlink-toolkit/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":foundry-chainlink-toolkit/=lib/foundry-chainlink-toolkit/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":permit2/=lib/v4-periphery/lib/permit2/\",\":solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/\",\":v4-core/=lib/v4-periphery/lib/v4-core/src/\",\":v4-periphery/=lib/v4-periphery/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/IPredictionManager.sol\":{\"keccak256\":\"0x36a4ac522d5bc74e77fb722dce4abd3cdda535deb53515a2804be929a59d0a43\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc2489991775343a6424d97aa77de7c92d10c02eebc5b7a2ca0428b1a4d40e2f\",\"dweb:/ipfs/QmXc1VpV2GL6mQiXEg2z5kd1B8YybHgmnU7DboxhGRECay\"]},\"src/types/PredictionTypes.sol\":{\"keccak256\":\"0xa158d4fd16826cd55c7beac796e00d570bc7e779ba54134f88eafaf3adcad869\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b70699e677b83dbd0c34ab544feedd13a7f79630f3d1a496a0c57ae537af6e43\",\"dweb:/ipfs/QmYDFn5au9Htjb289VBnJ34QWkEEvoz2fXj57kUsTcVGWt\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"checker","outputs":[{"internalType":"bool","name":"canExec","type":"bool"},{"internalType":"bytes","name":"execPayload","type":"bytes"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getExpiredMarkets","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"uint256","name":"marketId","type":"uint256"}],"stateMutability":"view","type":"function","name":"isMarketExpired","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"performGelatoUpkeep"},{"inputs":[],"stateMutability":"view","type":"function","name":"protocolFeeBasisPoints","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"marketId","type":"uint256"},{"internalType":"enum PredictionTypes.Outcome","name":"outcome","type":"uint8"},{"internalType":"uint128","name":"convictionStakeDeclared","type":"uint128"}],"stateMutability":"payable","type":"function","name":"recordPrediction"},{"inputs":[{"internalType":"uint256","name":"marketId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"resolveMarketManual"}],"devdoc":{"kind":"dev","methods":{"checker()":{"returns":{"canExec":"Whether upkeep is needed","execPayload":"The payload to execute"}},"getExpiredMarkets()":{"returns":{"_0":"An array of market IDs that have expired"}},"isMarketExpired(uint256)":{"params":{"marketId":"The ID of the market to check"},"returns":{"_0":"Whether the market has expired"}},"protocolFeeBasisPoints()":{"returns":{"_0":"The protocol fee in basis points (e.g., 100 for 1%)."}},"recordPrediction(address,uint256,uint8,uint128)":{"details":"This function is called by the hook, which passes the stake amount declared in hookData.","params":{"convictionStakeDeclared":"The amount of conviction (stake) declared for this prediction.","marketId":"The ID of the market for which the prediction is made.","outcome":"The predicted outcome (Bearish or Bullish).","user":"The address of the user making the prediction."}},"resolveMarketManual(uint256)":{"params":{"marketId":"The ID of the market to resolve"}}},"version":1},"userdoc":{"kind":"user","methods":{"checker()":{"notice":"Gelato automation checker function"},"getExpiredMarkets()":{"notice":"Returns an array of expired market IDs"},"isMarketExpired(uint256)":{"notice":"Checks if a market has expired"},"performGelatoUpkeep()":{"notice":"Performs Gelato upkeep to resolve expired markets"},"protocolFeeBasisPoints()":{"notice":"Returns the current protocol fee in basis points."},"recordPrediction(address,uint256,uint8,uint128)":{"notice":"Records a user's prediction and associated stake."},"resolveMarketManual(uint256)":{"notice":"Manually resolves a market (owner only)"}},"version":1}},"settings":{"remappings":["@chainlink/contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/","@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/","@openzeppelin/=lib/openzeppelin-contracts/","@pythnetwork/pyth-sdk-solidity/=node_modules/@pythnetwork/pyth-sdk-solidity/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","chainlink-brownie-contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/","ds-test/=lib/foundry-chainlink-toolkit/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","foundry-chainlink-toolkit/=lib/foundry-chainlink-toolkit/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/","openzeppelin-contracts/=lib/openzeppelin-contracts/","permit2/=lib/v4-periphery/lib/permit2/","solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/","v4-core/=lib/v4-periphery/lib/v4-core/src/","v4-periphery/=lib/v4-periphery/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IPredictionManager.sol":"IPredictionManager"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"src/interfaces/IPredictionManager.sol":{"keccak256":"0x36a4ac522d5bc74e77fb722dce4abd3cdda535deb53515a2804be929a59d0a43","urls":["bzz-raw://fc2489991775343a6424d97aa77de7c92d10c02eebc5b7a2ca0428b1a4d40e2f","dweb:/ipfs/QmXc1VpV2GL6mQiXEg2z5kd1B8YybHgmnU7DboxhGRECay"],"license":"MIT"},"src/types/PredictionTypes.sol":{"keccak256":"0xa158d4fd16826cd55c7beac796e00d570bc7e779ba54134f88eafaf3adcad869","urls":["bzz-raw://b70699e677b83dbd0c34ab544feedd13a7f79630f3d1a496a0c57ae537af6e43","dweb:/ipfs/QmYDFn5au9Htjb289VBnJ34QWkEEvoz2fXj57kUsTcVGWt"],"license":"MIT"}},"version":1},"id":142}