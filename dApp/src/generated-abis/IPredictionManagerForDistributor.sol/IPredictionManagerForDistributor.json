{"abi":[{"type":"function","name":"claimReward","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"claimReward(uint256)":"ae169a50"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SwapCast Developers\",\"kind\":\"dev\",\"methods\":{\"claimReward(uint256)\":{\"details\":\"The implementation in PredictionManager needs to handle how the claimant is identified,      as msg.sender will be the RewardDistributor contract.\",\"params\":{\"tokenId\":\"The ID of the SwapCastNFT representing the user's position.\"}}},\"title\":\"IPredictionManagerForDistributor Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimReward(uint256)\":{\"notice\":\"Called by the RewardDistributor to process a reward claim for a given NFT.\"}},\"notice\":\"Defines the interface for the PredictionManager contract, specifically for interactions         initiated by the RewardDistributor.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IPredictionManagerForDistributor.sol\":\"IPredictionManagerForDistributor\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/\",\":@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/\",\":@openzeppelin/=lib/foundry-chainlink-toolkit/lib/openzeppelin-contracts/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":chainlink-brownie-contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":ds-test/=lib/foundry-chainlink-toolkit/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":foundry-chainlink-toolkit/=lib/foundry-chainlink-toolkit/\",\":hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/\",\":openzeppelin-contracts/=lib/foundry-chainlink-toolkit/lib/openzeppelin-contracts/\",\":permit2/=lib/v4-periphery/lib/permit2/\",\":solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/\",\":v4-core/=lib/v4-periphery/lib/v4-core/src/\",\":v4-periphery/=lib/v4-periphery/\"],\"viaIR\":true},\"sources\":{\"src/interfaces/IPredictionManagerForDistributor.sol\":{\"keccak256\":\"0xa8564a1794431d51ca32a55436236e6d4cc924799c7463c3f3c94010afe82a0d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c5c65fb46406124ec74cd8be6b4617e6f841581c076f9f497f6e141ac4be843\",\"dweb:/ipfs/QmQBhk23ADLR6qZCyLoWpoHni2wt4a4XcQ3AFneeARHkwn\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"claimReward"}],"devdoc":{"kind":"dev","methods":{"claimReward(uint256)":{"details":"The implementation in PredictionManager needs to handle how the claimant is identified,      as msg.sender will be the RewardDistributor contract.","params":{"tokenId":"The ID of the SwapCastNFT representing the user's position."}}},"version":1},"userdoc":{"kind":"user","methods":{"claimReward(uint256)":{"notice":"Called by the RewardDistributor to process a reward claim for a given NFT."}},"version":1}},"settings":{"remappings":["@chainlink/contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/","@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/","@openzeppelin/=lib/foundry-chainlink-toolkit/lib/openzeppelin-contracts/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","chainlink-brownie-contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/","ds-test/=lib/foundry-chainlink-toolkit/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-gas-snapshot/=lib/v4-periphery/lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","foundry-chainlink-toolkit/=lib/foundry-chainlink-toolkit/","hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/","openzeppelin-contracts/=lib/foundry-chainlink-toolkit/lib/openzeppelin-contracts/","permit2/=lib/v4-periphery/lib/permit2/","solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/","v4-core/=lib/v4-periphery/lib/v4-core/src/","v4-periphery/=lib/v4-periphery/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IPredictionManagerForDistributor.sol":"IPredictionManagerForDistributor"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"src/interfaces/IPredictionManagerForDistributor.sol":{"keccak256":"0xa8564a1794431d51ca32a55436236e6d4cc924799c7463c3f3c94010afe82a0d","urls":["bzz-raw://2c5c65fb46406124ec74cd8be6b4617e6f841581c076f9f497f6e141ac4be843","dweb:/ipfs/QmQBhk23ADLR6qZCyLoWpoHni2wt4a4XcQ3AFneeARHkwn"],"license":"MIT"}},"version":1},"id":115}