@startuml SwapCast_Container_Diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_WITH_LEGEND()

title "SwapCast System - Container Diagram"

Person(trader, "Trader", "Makes swaps on Uniswap v4 and includes price predictions")
Person(liquidity_provider, "Liquidity Provider", "Provides initial liquidity to prediction markets")
Person(prediction_analyst, "Prediction Analyst", "Consumes market intelligence data")
Person(admin, "Admin", "Can manually resolve edge case predictions")

System_Boundary(swapcast, "SwapCast System") {
    Container(swapcast_ui, "SwapCast UI", "React, Web3.js", "Frontend interface for prediction creation, tracking and claiming rewards")
    Container(admin_ui, "Admin Interface", "React, Web3.js", "Interface for managing and resolving edge cases")

    Container(swapcast_hook, "SwapCastHook", "Solidity", "Intercepts Uniswap v4 swaps and captures predictions")
    Container(prediction_manager, "PredictionManager", "Solidity", "Manages prediction markets, positions, and rewards")
    Container(swapcast_nft, "SwapCastNFT", "Solidity", "ERC721 contract for prediction position tokens")
    Container(oracle_resolver, "OracleResolver", "Solidity", "Resolves predictions using Chainlink data")
    Container(reward_distributor, "RewardDistributor", "Solidity", "Forwards reward claims to the PredictionManager")
    Container(treasury, "Treasury", "Solidity", "Collects and holds protocol fees from predictions")

    ContainerDb(subgraph, "SwapCast Subgraph", "GraphQL", "Indexes prediction markets and positions for efficient querying")
}

System_Ext(uniswap, "Uniswap v4", "Decentralized exchange protocol")
System_Ext(chainlink_price, "Chainlink Price Feeds", "Decentralized oracle network for price data")
System_Ext(chainlink_automation, "Chainlink Automation", "Decentralized service for checking expired predictions")

Rel(trader, swapcast_ui, "Creates predictions and claims rewards", "HTTPS")
Rel(trader, uniswap, "Performs token swaps", "Web3")
Rel(liquidity_provider, swapcast_ui, "Provides initial liquidity", "HTTPS")
Rel(prediction_analyst, swapcast_ui, "Analyzes market sentiment data", "HTTPS")
Rel(admin, admin_ui, "Manages and resolves edge cases", "HTTPS")

Rel(swapcast_ui, prediction_pool, "Reads market data", "Web3")
Rel(swapcast_ui, swapcast_nft, "Reads position data", "Web3")
Rel(swapcast_ui, reward_distributor, "Initiates reward claims", "Web3")
Rel(swapcast_ui, subgraph, "Queries market and position data", "GraphQL")
Rel(admin_ui, oracle_resolver, "Submits manual resolutions", "Web3")

Rel(swapcast_hook, uniswap, "Hooks into swap transactions", "Solidity hooks")
Rel(swapcast_hook, prediction_manager, "Creates prediction positions", "Function calls")
Rel(prediction_manager, treasury, "Sends prediction fees", "Funds transfer")
Rel(swapcast_ui, treasury, "Reads treasury balance (protocol fees collected)", "Web3")

Rel(prediction_manager, swapcast_nft, "Mints position NFTs", "Function calls")
Rel(prediction_manager, oracle_resolver, "Registers markets for resolution", "Function calls")

Rel(oracle_resolver, chainlink_price, "Fetches asset prices", "API calls")
Rel(oracle_resolver, prediction_manager, "Updates market resolution state", "Function calls")
Rel(chainlink_automation, oracle_resolver, "Triggers resolution of expired predictions", "checkUpkeep/performUpkeep")

Rel(reward_distributor, prediction_manager, "Facilitates reward claims from users", "Function calls")
Rel(prediction_manager, swapcast_nft, "Burns redeemed position NFTs", "Function calls")

@enduml
