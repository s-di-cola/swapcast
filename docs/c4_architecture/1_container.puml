@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_WITH_LEGEND()

title "SwapCast System - Container Diagram"

Person(trader, "Trader", "Makes swaps on Uniswap v4 and includes price predictions")
Person(liquidity_provider, "Liquidity Provider", "Provides initial liquidity to prediction markets")
Person(prediction_analyst, "Prediction Analyst", "Consumes market intelligence data")
Person(admin, "Admin", "Can manually resolve edge case predictions")

System_Boundary(swapcast, "SwapCast System") {
    Container(swapcast_ui, "SwapCast UI", "React, Web3.js", "Frontend interface for prediction creation, tracking and claiming rewards")
    Container(admin_ui, "Admin Interface", "React, Web3.js", "Interface for managing and resolving edge cases")

    Container(swapcast_hook, "SwapCast Hook Contract", "Solidity", "Intercepts Uniswap v4 swaps and captures predictions")
    Container(prediction_pool, "Prediction Pool Contract", "Solidity", "Manages prediction markets and positions")
    Container(swapcast_nft, "SwapCast NFT Contract", "Solidity", "ERC721 contract for prediction position tokens")
    Container(oracle_resolver, "Oracle Resolver Contract", "Solidity", "Resolves predictions using Chainlink data")
    Container(reward_distributor, "Reward Distributor Contract", "Solidity", "Calculates and distributes rewards to winners")
    Container(treasury, "Treasury Contract", "Solidity", "Holds all prediction fees and pays out rewards to winners")

    ContainerDb(subgraph, "SwapCast Subgraph", "GraphQL", "Indexes prediction markets and positions for efficient querying")
}

System_Ext(uniswap, "Uniswap v4", "Decentralized exchange protocol")
System_Ext(chainlink_price, "Chainlink Price Feeds", "Decentralized oracle network for price data")
System_Ext(chainlink_automation, "Chainlink Automation", "Decentralized service for checking expired predictions")

Rel(trader, swapcast_ui, "Creates predictions and claims rewards", "HTTPS")
Rel(trader, uniswap, "Performs token swaps", "Web3")
Rel(liquidity_provider, swapcast_ui, "Provides initial liquidity", "HTTPS")
Rel(prediction_analyst, swapcast_ui, "Analyzes market sentiment data", "HTTPS")
Rel(admin, admin_ui, "Manages and resolves edge cases", "HTTPS")

Rel(swapcast_ui, prediction_pool, "Reads market data", "Web3")
Rel(swapcast_ui, swapcast_nft, "Reads position data", "Web3")
Rel(swapcast_ui, reward_distributor, "Initiates reward claims", "Web3")
Rel(swapcast_ui, subgraph, "Queries market and position data", "GraphQL")
Rel(admin_ui, oracle_resolver, "Submits manual resolutions", "Web3")

Rel(swapcast_hook, uniswap, "Hooks into swap transactions", "Solidity hooks")
Rel(swapcast_hook, prediction_pool, "Creates prediction positions", "Function calls")
Rel(prediction_pool, treasury, "Sends prediction fees", "Funds transfer")
Rel(reward_distributor, treasury, "Instructs payout to winners", "Funds transfer")
Rel(swapcast_ui, treasury, "Reads treasury balance and payouts", "Web3")

Rel(prediction_pool, swapcast_nft, "Mints position NFTs", "Function calls")
Rel(prediction_pool, oracle_resolver, "Registers markets for resolution", "Function calls")

Rel(oracle_resolver, chainlink_price, "Fetches asset prices", "API calls")
Rel(oracle_resolver, prediction_pool, "Updates market resolution state", "Function calls")
Rel(chainlink_automation, oracle_resolver, "Triggers resolution of expired predictions", "checkUpkeep/performUpkeep")

Rel(reward_distributor, prediction_pool, "Reads market outcomes", "Function calls")
Rel(reward_distributor, swapcast_nft, "Burns redeemed position NFTs", "Function calls")

@enduml
