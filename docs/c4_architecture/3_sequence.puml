@startuml SwapCast_Sequence_Diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Sequence.puml

title "SwapCast System - Complete Sequence Diagram"

actor "Trader" as trader
participant "Uniswap v4\nPool" as uniswap
participant "SwapCast\nHook" as hook
participant "Prediction\nManager" as manager
participant "SwapCast\nNFT" as nft
participant "Oracle\nResolver" as resolver
participant "Chainlink\nFeed Registry" as feed_registry
participant "Chainlink\nAutomation" as automation
participant "Reward\nDistributor" as distributor

' Phase 1: Prediction Creation
group Prediction Creation
    trader -> uniswap : 1. swap(params) with prediction data
    activate uniswap

    uniswap -> uniswap : 2. Process swap
    uniswap -> hook : 3. afterSwap(...)
    activate hook

    hook -> hook : 4. Parse prediction data
    hook -> hook : 5. Calculate conviction weight
    hook -> manager : 6. recordPrediction(...)
    activate manager

    manager -> manager : 7. Get or create market
    manager -> resolver : 8. Register market for resolution
    activate resolver
    resolver --> manager : 9. Confirmation
    deactivate resolver

    manager -> nft : 10. mint(...)
    activate nft
    nft -> nft : 11. Store prediction metadata
    nft --> manager : 12. Return NFT ID
    deactivate nft

    manager --> hook : 13. Return position ID
    deactivate manager

    hook --> uniswap : 14. Return afterSwap selector
    deactivate hook

    uniswap --> trader : 15. Swap and prediction completed
    deactivate uniswap
end

' Phase 2: Prediction Resolution
group Prediction Resolution (At Expiration)
    automation -> resolver : 16. checkUpkeep()
    activate resolver

    resolver -> resolver : 17. Find expired markets
    resolver --> automation : 18. (true, performData)
    deactivate resolver

    automation -> resolver : 19. performUpkeep(performData)
    activate resolver

    resolver -> feed_registry : 20. latestRoundData(baseToken, quoteToken)
    activate feed_registry
    feed_registry --> resolver : 21. Return price data
    deactivate feed_registry

    resolver -> resolver : 22. Determine outcome
    resolver -> manager : 23. resolveMarket(marketId, outcome)
    activate manager

    manager -> manager : 24. Update market state
    manager --> resolver : 25. Resolution completed
    deactivate manager

    resolver --> automation : 26. Upkeep completed
    deactivate resolver
end

' Phase 3: Reward Claiming (Pull-based)
group Reward Claiming (Pull-based)
    trader -> distributor : 27. claimReward(nftId)
    activate distributor

    distributor -> manager : 28. claimReward(nftId)
    activate manager
    
    manager -> nft : 29. Verify NFT ownership
    activate nft
    nft --> manager : 30. Ownership confirmed
    deactivate nft

    manager -> nft : 31. getPredictionDetails(nftId)
    activate nft
    nft --> manager : 32. Position details
    deactivate nft

    manager -> manager : 33. Verify market outcome
    manager -> manager : 34. Calculate reward

    alt Position won
        manager -> nft : 35. burn(nftId)
        activate nft
        nft --> manager : 36. NFT burned
        deactivate nft

        manager -> trader : 37. Transfer reward ETH
        manager --> distributor : 38. Return success
        deactivate manager

        distributor --> trader : 39. Return success
    else Position lost or invalid
        manager --> distributor : 40. Revert with error
        deactivate manager
        distributor --> trader : 41. Return failure (no reward)
    end

    deactivate distributor
end

@enduml
